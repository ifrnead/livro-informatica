 \fancyhead{} % clear all header fields \fancyhead[RO,LE]{\flushleft  INTRODUÇÃO}%  \renewcommand{\headrulewidth}{0.4pt}\mychapter{Introdução}\label{Cap:introducao}Modelar e resolver problemas complexos do mundo em que vivemos não é uma tarefa trivial, pois existem inúmeras situações em que é impossível se construir um modelo detalhado para o problema, dada sua elevada complexidade. Por outro lado, um processo de simplificação de tal modelo pode causar perdas de informações relevantes que podem comprometer a sua qualidade. Além da dificuldade inerente à construção de modelos para tais problemas, uma característica que os acompanha durante a fase de resolução é a necessidade de processamento computacional de grande porte, o que, na maioria das vezes, leva tais problemas a serem considerados intratáveis. Nesse contexto, inúmeros pesquisadores têm se dedicado ao desenvolvimento de técnicas que visam facilitar a modelagem e, principalmente, a resolução destes problemas ~\cite{proc-limajunior}.Uma abordagem bastante utilizada na obtenção de soluções para os problemas citados acima tem feito uso de técnicas chamadas metaheurísticas ~\cite{proc-mehmet}, que são estratégias baseadas em procedimentos heurísticos, aplicáveis principalmente aos problemas de otimização e que produzem um processo simplificado de busca estocástica no espaço de solução. Entretanto, este processo simplificado de busca não garante que a solução encontrada seja a solução ótima do problema. Diferentes problemas de grande importância prática têm sido resolvidos com sucesso, dentre os quais, pode-se citar:\begin{itemize}\item Roteamento para atendimento médico ~\cite{art-joaquin}\item Sequenciamento de DNA ~\cite{proc-blazewicz}\item Matriz energética ~\cite{proc-mehdi}\item Engenharia de Software ~\cite{proc-clarke}\item Projetos de chips VLSI ~\cite{proc-faroe}\end{itemize}Basicamente, uma metaheurística é constituída de duas etapas, a saber: geração aleatória de uma ou mais soluções no espaço de busca (etapa de diversificação da busca) e na melhoria desta(s) solução(ões) usando um procedimento de busca local (etapa de intensificação da busca). A maneira como é(são) gerada(s) a(s) solução(ões) incial(is), os procedimentos de busca local utilizados e a alternância entre as etapas de intensificação e diversificação estabelecem as diferenças entre as diversas metaheurísticas. A diversificação é utilizada para permitir a fuga da solução dos chamados mínimos locais, enquanto a intensificação é utilizada para melhorar a qualidade da solução localmente, em busca do ótimo global.A qualidade das soluções geradas durante a fase de diversificação está diretamente ligada à qualidade das soluções obtidas após a fase de intensificação. Para problemas complexos, esta qualidade da solução inicial nem sempre é fácil de ser obtida, levando assim à constante investigação de novas abordagens para garantir este aspecto das metaheurísticas. No grupo de pesquisas em Sistemas Inteligentes da UFRN vem sendo investigada a possibilidade da utilização de técnicas de aprendizagem de máquina para melhorar a qualidade das soluções iniciais ~\cite{proc-limajunior}. Os trabalhos têm investigado a utilização da aprendizagem por reforço ~\cite{book-barton} como alternativa para o problema da qualidade nas soluções geradas nas metaheurísticas. Trata-se de uma técnica de aprendizagem baseada na interação entre agente e ambiente, onde percepções do ambiente são transformadas em ações, sendo estas recompensadas ou punidas de acordo com as suas conseqüências sobre o ambiente. São normalmente utilizadas na solução de problemas de decisão markovianos, embora possam ser adaptadas para uma vasta classe de problemas de otimização.%\nomenclature{UFRN}{Universidade Federal do Rio Grande de Norte}%A grande demanda de processamento referida anteriormente é outro aspecto a ser considerado. Uma ação possível para essa demanda de processamento é a utilização de arquiteturas dotadas de capacidade de processamento paralelo, capazes de aumentar em algumas ordens de grandeza a potência de processamento disponível nas arquiteturas monoprocessadas usuais. A utilização do processamento paralelo impõe o desenvolvimento de novos algoritmos e abre possibilidades para a exploração de aspectos do problema não abordáveis nas arquiteturas usuais, tais como, concorrência, cooperação e competição ~\cite{book-ian}.\section{Motivação}Com a complexidade dos problemas do mundo real e, motivado pelas dificuldades em torno da resolução destes problemas, além do êxito conseguido pelas técnicas já citadas, esse trabalho propôs o desenvolvimento de métodos paralelos híbridos, utilizando a aprendizagem por reforço e as metaheurísticas GRASP e Algoritmos Genéticos. Com a utilização dessas técnicas em conjunto, buscou-se contribuir para uma melhor eficiência na obtenção das soluções. Nesse caso, ao invés de utilizar o algoritmo \textit{Q-learning} da aprendizagem por reforço, apenas como técnica de geração das soluções iniciais das metaheurísticas, utilizar também o \textit{Q-learning} de forma cooperativa e competitiva com o Algoritmo Genético e o GRASP, em uma implementação paralela.% \section{Proposta}% \label{sec:proposta} % % Neste trabalho tem como proposta o desenvolvimento e implementação de uma estratégia paralela cooperativa e competitiva dos algoritmos \textit{Q-learning}, Genético e GRASP, para resolução do problema do caixeiro viajante (PCV). A idéia básica é usar conjuntamente as soluções encontradas por cada algoritmo e com isto suprir deficiências que os mesmos apresentam quando usados de forma isolada. Para que esta interação fosse efetiva, torna-se necessário estabelecer as interfaces de comunicação que possibilitaram a troca de informações. Uma forma de se testar o desempenho da implementação paralela foi utilizado o PCV simétrico como \textit{benchmark} .\section{Objetivos}Como em toda abordagem para resolução de problemas, as metaheurísticas possuem suas dificuldades, que estão diretamente ligadas ao dilema intensificação ou diversificação (ou \textit{exploration/exploitation}): trata-se da busca de equilíbrio entre intensificar a busca local ou explorar o espaço de soluções em busca de novas opções. Sem uma boa apreciação deste dilema o algoritmo pode facilmente ficar preso um mínimo local. Sendo assim, este trabalho tem como objetivos:\begin{itemize}	\item Estudar as potencialidades do uso conjunto do algoritmo \textit{Q-learning} da aprendizagem por reforço com as metaheurísticas GRASP e Algoritmo Genético para resolução de problemas de otimização combinatória, buscando estabelecer um bom compromisso entre as etapas de intensificação e diversificação.	\item Realizar uma implementação paralela de forma cooperativa e competitiva das três técnicas citadas e analisar sua(s) contribuição(ões) na aceleração e na qualidade da solução do problema.		\item Utilizar o Problema do Caixeiro Viajante simétrico como \textit{benchmark} para testar o desempenho da implementação paralela.\end{itemize}\section{Estado da arte}Uma limitação encontrada nos procedimentos de busca local é a sua complexidade exponencial. O problema pode ser formulado da seguinte forma: dada uma instância de um problema de busca local e uma solução inicial $s$, existe uma solução ótima local $s'$ que pode ser obtida a partir de $s$ em um número polinomial de passos de busca local ?. Em \citeasnoun{art-fischer}, o autor estabelece que a solução desta questão está em NP\footnote{De acordo com Wikipédia(http://pt.wikipedia.org/wiki/NP\_(complexidade)), um problema é de classe NP (do inglês \textit{Non-Deterministic Polynomial time}) se sua solução pode ser verificada em um tempo polinomial por uma máquina de Turing não-determinística} (Não Polinomial). Logo, o uso do processamento paralelo pode ser uma alternativa interessante para amenizar esta dificuldade e permitir um aumento significativo no tamanho dos problemas tratados. Deve-se observar ainda que há algum tempo, o uso de processamento paralelo em metaheurísticas vem sendo estudado ~\cite{col-duni}.%\nomenclature{NP}{Não Polinomial}%Os algoritmos utilizados podem ser classificados de acordo com o percurso realizado no espaço de busca (simples ou múltiplo) e no mecanismo de execução (síncrono ou assíncrono). Em algoritmos de percurso simples, apenas um caminho no espaço de busca é explorado, com a execução simultânea de várias das etapas da busca local. Em algoritmos de percursos múltiplos várias soluções são avaliadas de forma simultânea, seja de forma iterativa ou de forma independente. Em algoritmos paralelos de execução síncrona, uma ou mais etapas do algoritmo são efetuadas no mesmo instante por todas as tarefas, enquanto na execução assíncrona cada tarefa é processada de forma independente.Neste trabalho\begin{large}              \end{large}, foram estudados os algoritmos de busca de percursos múltiplos assíncronos baseados nas metaheurísticas GRASP e Algoritmos Genéticos e na Aprendizagem por Reforço. Como serão utilizados vários algoritmos diferentes em paralelo, optou-se por denominar a aplicação resultante de \textit{híbrida}. O termo híbrido tem sido usado em outros contextos, seja porque o algoritmo sequencial paralelizado já tem essa denominação de híbrido ~\cite{art-aziz}, seja pelo uso de diferentes objetivos na busca paralela ~\cite{art-berger}. Os algoritmos paralelos baseados nos percursos múltiplos também são chamados algoritmos \textit{cooperativos} ~\cite{art-toulouse} e não seguem a mesma concepção dos algoritmos paralelos baseados em decomposição dos dados ou decomposição funcional clássicos ~\cite{book-ian}.Seguindo a abordagem cooperativa, podem-se citar os trabalhos de  \citeasnoun{art-rosseti} e \citeasnoun{proc-pardalos} que analisam diferentes implementações da metaheurística GRASP e os trabalhos de \citeasnoun{inbook-claudia} e \citeasnoun{proc-gordon} sobre implementações paralelas de Algoritmos Genéticos. No que diz respeito à aprendizagem por reforço, as implementações paralelas podem ser divididas em duas categorias: os problemas de projeto de agentes únicos e os problemas de projeto multi-agentes. O caso tratado neste trabalho é de projeto de agente único, voltado para a solução do problema do caixeiro viajante e neste contexto pode-se citar os trabalhos de \citeasnoun{art-kusida}, que explora a decomposição do espaço dos estados e \citeasnoun{proc-kudenko} que utilizam um aprendizado cooperativo para o projeto do agente.\section{Organização do trabalho}Este trabalho está organizado da seguinte forma: no capítulo 2, apresenta-se uma descrição de alguns conceitos de otimização combinatória e uma descrição do problema do caixeiro viajante. No capítulo 3, são tratados os conceitos básicos das metaheurísticas GRASP e Algoritmo Genético, enquanto que no capítulo 4, abordam-se conceitos sobre processos de decisão markovianos e apredizagem por reforço, com enfoque no algoritmo \textit{Q-learning}. No capítulo 5, apresenta-se a abordagem paralela cooperativa e competitiva e, no capítulo 6, os resultados dos experimentos feitos na execução do método proposto. No capítulo 7 é discorrido as conclusões relacionadas à dissertação desenvolvida.